設定(settings)：
    - 設定資料庫(這裡使用sqlite)：
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            }
        }


模型(models)：
    - 創建表：
        (1) 必須繼承models.Model，python才會知道他是表。
            class Book(models.Model):
                name = models.CharField(max_length=20)
                price = models.IntegerField()
                date = models.DateField()
                author = models.CharField(max_length=32, null=False)  # null=False 不能為空

                def __str__(self):
                    return self.name

        (2) 生成同步數據庫的腳本（偵測 model 變化，並建立更改文件）。
            cmd中執行 python manage.py makemigrations

        (3) 同步數據庫（依更改文件修正資料庫）。
            cmd中執行 python manage.py migrate


視圖(views)：
    一、增(add)：
        - 方法一：
            b = models.Book(name='test', price=10, date='1999-09-09', author='jj')
            b.save()
        - 方法二：
            - 2-1：
                models.Book.objects.create(name='test', price=10, date='1999-09-09', author='jj')
            - 2-2：
                book = {"name": 'test', "price": 10, "date": '1999-09-09', "author": 'jj'}
                models.Book.objects.create(**book)

    二、刪(delete)：
        models.Book.objects.filter(price=10).delete()

    三、改(update)：
        - 方法一(只能改一個)：若遇到多個可修改之對象，則會報錯。
            b = models.Book.objects.get(name='python')  # b為Book實例對象
            b.date = '1000-01-01'
            b.save()
            print(b, type(b))  # Book object <class 'app01.models.Book'>
        - 方法二(可改多個)：
            models.Book.objects.filter(name='test').update(price=100)

    四、查(search)：
        - filter(**kwargs)：它包含了與所給篩選條件相匹配的對象(返回集合對象QuerySet)。
            指令：models.Book.objects.filter(name='test')
            結果：<QuerySet [<Book: test>, <Book: test>]>

        - all()：查詢所有結果(返回集合對象QuerySet)。
            指令：models.Book.objects.all()[:3]  # QuerySet支持切片
            結果：<QuerySet [<Book: python>, <Book: test>, <Book: js>]>

        - get(**kwargs)：返回與所給篩選條件相匹配的對象，返回結果有且只有一個。如果符合篩選條件的對象超過一個或者沒有都會拋出錯誤(返回實例對象)。
            指令：models.Book.objects.get(name='python')
            結果：python  (此為book對象，只是因有設定 __str__ ，所以才顯示python)

        - exclude(**kwargs)：它包含了與所給篩選條件不匹配的對象(返回集合對象QuerySet)。
            指令：models.Book.objects.exclude(author='jamie')
            結果：<QuerySet [<Book: test>, <Book: js>, <Book: test>]>

        - 下面的方法都是對查詢的結果再進行處理（例如：objects.filter.values()）：
            - values(*field)：返回一個ValueQuerySet（一個特殊的QuerySet），運行後得到的並不是一系列model的實例化對象，而是一個可迭代的字典序列。
                - 字典形式：
                    指令：models.Book.objects.filter(name='test').values('name', 'price')
                    結果：<QuerySet [{'name': 'test', 'price': 666}, {'name': 'test', 'price': 666}]>
                - 元組形式：
                    指令：models.Book.objects.filter(name='test').values_list('name', 'price')
                    結果：<QuerySet [('test', 666), ('test', 666)]>

            - order_by(*field)：對查詢結果排序。
                指令：models.Book.objects.all().order_by('-price')   # 加負號(-)為倒序
                結果：<QuerySet [<Book: python>, <Book: test>, <Book: test>, <Book: js>]>

            - distinct()：從返回結果中剔除重複紀錄。
                - 範例一：
                    指令：models.Book.objects.all().values('name').distinct()
                    結果：<QuerySet [{'name': 'python'}, {'name': 'test'}, {'name': 'js'}]>
                - 範例二：
                    指令：models.Book.objects.all().values('name', 'price').distinct()
                    結果：<QuerySet [{'name': 'python', 'price': 999}, {'name': 'test', 'price': 666}, {'name': 'js', 'price': 500}]>

            - count()：返回數據庫中匹配查詢(QuerySet)的對像數量。
                指令：models.Book.objects.filter(name='test').count()
                結果：2

            - only(*field)：只取出想要的字段名，跟values差別在於，only出來的仍是obj。
                指令：models.Book.objects.filter(name='test').only()
                結果：<QuerySet [<Book: test>, <Book: test>]>

            - raw(sql語句)：可以使用原生sql語句。
                指令：models.Book.objects.raw("SELECT id, name FROM Book;")  # 一定要包含主鍵
                結果：<RawQuerySet: SELECT id,name FROM Book;>

        - 萬能的__：
            - price__gt大於；price__lt小於：
                指令：models.Book.objects.filter(price__gt=400)
                結果：<QuerySet [<Book: python>, <Book: test>, <Book: js>, <Book: test>]>

            - id__in(<<列表>>)存在：
                指令：models.Book.objects.filter(id__in=[1, 8])
                結果：<QuerySet [<Book: python>, <Book: test>]>

            - name__icontains包含且不分大小寫；name__contains包含。
                指令：models.Book.objects.filter(name__icontains="S")
                結果：<QuerySet [<Book: test>, <Book: js>, <Book: test>]>


總結：
    一、一個Model類代表資料庫中的一張表。
    二、Model類的對象代指資料庫的一行數據。
    ※ 多多利用雙下划線
    ※ 物件關聯對映(ORM) 是一種用於實現從物件資料到關聯資料的存儲對映的程式設計技術，將資料庫操作用物件導向的形式來呈現。