跨站請求偽造(Cross-site request forgery)：
    - 也被稱為 one-click attack 或者 session riding，通常縮寫為 CSRF。
    - 是一種讓用戶在不知情的情況下，在當前已登入的Web應用程式上執行非本意的操作的攻擊方法。
    攻擊細節：
        - 簡單地說，是攻擊者通過一些技術手段欺騙用戶的瀏覽器去存取一個自己曾經認證過的網站並執行一些操作(EX：發郵件、轉帳和購買商品。)
        - 由於瀏覽器曾經認證過，所以被存取的網站會認為是真正的用戶操作而去執行，利用web中用戶身分驗證的漏洞，
          簡單的身分驗證只能保證請求發自某個用戶的瀏覽器，卻不能保證請求本身是用戶自願發出的。

防範方法：
    - 檢查Referer欄位：
        - HTTP頭中有一個Referer欄位，這個欄位用以標明請求來源於哪個位址。
        - 在處理敏感資料請求時，通常來說，Referer欄位應和請求的位址位於同一域名下。
        - 以銀行操作為例，Referer欄位位址通常應該是轉帳按鈕所在的網頁位址，應該也位於www.examplebank.com之下。
          而如果是攻擊傳來的請求，Referer欄位不會位於www.examplebank.com之下，這時候伺服器就能識別出惡意的存取。
        缺陷：
            - 因其完全依賴瀏覽器發送正確的Referer欄位，雖然http協定對此欄位的內容有明確的規定，
              但並無法保證來訪的瀏覽器的具體實現，亦無法保證瀏覽器沒有安全漏洞影響到此欄位。
            - 有存在攻擊者攻擊某些瀏覽器，篡改其Referer欄位的可能。
            - 若有真正的使用者，他們在設定時屏蔽了Referer欄位，那將造成他們無法進行操作。
    - 添加校驗token：
        - 由於CSRF的本質在於攻擊者欺騙用戶去存取自己設定的位址，所以如果要求在存取敏感資料請求時，
          要求用戶瀏覽器提供不儲存在cookie中，並且攻擊者無法偽造的資料作為校驗，那麼攻擊者就無法再執行CSRF攻擊。
        - 這種資料通常是表單中的一個資料項。
        - 伺服器將其生成並附加在表單中，其內容是一個偽亂數，當客戶端通過表單提交請求時，這個偽亂數也一並提交上去以供校驗，
          正常的存取時，客戶端瀏覽器能夠正確得到並傳回這個偽亂數，而通過CSRF傳來的欺騙性攻擊中，攻擊者無從事先得知這個偽亂數的值，
          伺服器端就會因為校驗token的值為空或者錯誤，拒絕這個可疑請求。


Django csrf中間件(全局csrf防護)：
    一、先導入這一行，from django.middleware.csrf import CsrfViewMiddleware，這樣就能透過CTRL+左鍵訪問
    二、判斷繼承關係：
        - CsrfViewMiddleware繼承MiddlewareMixin
        - 所有中間件都會繼承MiddlewareMixin
    三、源碼流程：
        - 所有中間件都能實現process_request, process_views, process_response等方法。
        -> 一個請求進來最先經過process_request方法
            -> _get_token 獲取csrf權杖
                -> 先判斷有沒有CSRF_USE_SESSIONS(可以透過導入global_settings，來深入查看源碼)，默認為False
                -> 若沒有CSRF_USE_SESSIONS，則是會去request.COOKIES[settings.CSRF_COOKIE_NAME]中找有沒有權杖(settings.CSRF_COOKIE_NAME默認為csrftoken)
                    -> 若沒有則返回None
                    -> 若有則先透過_sanitize_token對權杖加密，並返回加密後的權杖
            -> 若_get_token沒有獲取到權杖，則不執行動作，交給process_views處理
               若有獲取權杖，則設定request.META['CSRF_COOKIE'] = csrf_token
        -> 如果csrf在process_request方法中沒被處理，則會到這處理，如果該方法有@csrf_exempt裝飾器，也可以免除csrf驗證

Views中設置裝飾器(局部防護)：
    - 可以透過@csrf_protect裝飾器，單獨為某個方法添加csrf防護(這是在csrf中間件被註解的情況下使用)
    - 可以透過@csrf_exempt裝飾器，單獨為某個方法免除csrf防護(這是在有csrf中間件的情況下使用)

HTML表單傳遞token驗證：
    - 使用{% csrf_token %}，他會產生一個csrf_token提交到服務器，透過這個csrf_token和request.META['CSRF_COOKIE']中的權杖進行匹對，
      若相等則通過，反之則不通過。

