Pytest介紹:
    - 介紹： 是python的一種單元測試框架。
    - 兼容： pytest可以執行原生unittest框架寫的用例和方法。
    - 文檔規則：
        - 檔名識別： 通常設為 test_*.py 或是 *_test.py 兩種。
        - 用例識別：
            (1) Test* 類所包含的所有 test_* 方法。(測試類不能帶有__init__方法)
            (2) 不在類中的 test_* 方法。


Pytest指令(cmd)：
    - 運行：
        - pytest 測試文件名.py
        - pytest -v 測試文件名.py  =>  -v 顯示更為詳細的測試內容。
        - pytest -s 測試文件名.py  =>  如果文件中有使用print方法，使用-s能額外捕捉它們。
        - pytest -x 測試文件名.py  =>  -x 表示只要遇到一個failed，就會直接停止測試。
        - pytest --maxfail=2 測試文件名.py  =>  --maxfail=2 表示遇到2個failed，就會直接停止測試。
        - pytest 測試文件名.py::test_one  =>  運行指定方法(此為test_one方法)。
        - pytest 測試文件名.py::TestCase::test_two  =>  運行指定方法(此為TestCase類下的test_two方法)。

    - 只運行某幾條測試用例：
        - pytest -m 標記名 測試文件名.py  =>  -m 只執行標記名相同的用例(用 @pytest.mark.標記名 進行裝飾且標記)。
        - pytest -k "類名 and not 方法名" 測試文件名.py  =>  -k 跳過某些用例。

    - 遇到failed時重複執行測試【需先 pip install pytest-rerunfailures】：
        - pytest --reruns=2 測試文件名.py  =>  --reruns=2 表示重複跑兩次測試
        - pytest --reruns=2 --reruns-delay=2 測試文件名.py  =>  --reruns-delay=2 表示停2秒後才能重複測試

    - 生成測試文件【需先 pip install pytest-html】：
        - pytest -v -s --html=report.html  =>  --html=report.html 表示要生成一個report.html的測試文件


Pytest代碼：
    - 使用pytest.assume()代替assert()【需先pip install pytest-assume】：
        差異：
            assert()： 當遇到failed時會直接結束此函式，後面的代碼不再執行。
            pytest.assume()： 就算遇到failed，也會繼續執行完整個函式。

    - 在文檔中使用pytest命令行指令：
        if __name__ == '__main__':
            """
            原因是因為Pycharm會把一些信息自動記錄下來。
            如果遇到奇怪的問題可以去中上偏右有一個顯示你當前文檔的框框點下去 => Edit Configurations
            => 把左半邊有關此文檔的紀錄都刪掉(用左上的-來刪除) => +一個python  => script path選擇此文檔路徑 => OK
            """
            # 在這邊調用命令行的參數
            pytest.main(['-v', '--reruns=2', '200510_sample_test.py::test_one'])

    - setup和teardown方法《值行並參考200521_setup_test.py》：
        優先級：
            - 模塊級(module)： 全局的(優先度最高)。
                - 函數級(function)： 只對函數用例生效。
                - 類級(class)： 只對類用例生效(只在類中的最前後運行一次)。
                    - 方法級(method)： 開始於方法始末。
                        - 最低級()： 運行在調用方法前後。

    - python-fixture《參考200521_fixture_test.py》：
        - 用途： 讓被@pytest.fixture()裝飾的函數可以當作test方法的變量。
        - 參數：
            - scope： 用在哪個級別。(默認是function)
                "function" (默認), "class", "module", "package"(包級別), "session"(最高級別，整個作用域都可用) 五種
            - params： 參數，被裝飾的函數要接收必須透過request.parm才能調用。(為一list)
            - autouse： autouse=True，代表全部測試方法都會自動調用他。
