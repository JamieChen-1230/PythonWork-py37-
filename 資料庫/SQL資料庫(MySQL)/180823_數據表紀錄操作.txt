新增表記錄：
    - 增加一條記錄insert
        - insert［into］tab_name (field1,filed2,.......) values (value1,value2,.......);
        指令範例： insert into employee(id, name, age, gender) values (1, 'jamie', 18, 1);
    - 可不加列名，但要全填值且按順序
        指令範例： insert into employee values (10, 22, 'qq', 0);
    - 用set添加
        指令範例： insert into employee set name='sb';
    - 增加多條記錄insert
        指令範例：
            insert into employee(name, age, gender) values ('a1', 18, 1), ('a2', 18, 1), ('a3', 18, 1);


修改表記錄：
    - update tab_name set field1=value1,field2=value2,... [where條件語句]
        指令範例： update employee set name='jamie666', age=age+10 where id=1;
    - 不加where代表全部
        指令範例： update employee set name='jamie666', age=age+10;


刪除表紀錄：
    - delete from tab_name [where條件語句]
        指令範例： delete from employee where name='jamie' OR age>18;
    - 刪除所有表紀錄
        指令範例： delete from employee;
    - 刪除所有表紀錄
        - TRUNCATE tab_name;
        指令範例： TRUNCATE employee;


查詢表紀錄(範例表數據在"練習範例數據.txt"中)：
    SELECT field1,filed2,... FROM tab_name
                       WHERE 條件
                       GROUP  BY field  分組
                       HAVING 篩選
                       ORDER  BY field  排序
                       LIMIT 限制條數
    - *代表全部
        指令範例： select * from person;
    - 部分查詢
        指令範例： select name, sex from person;
    - distinct去重複，若select有多個字段，則需每個字段都相同才去重
        - select [distinct] field1, field2,... from tab_name
        指令範例： select distinct name from exam;
    - select也可以使用表達式
        - 所有人薪水加200
            指令範例： select name, salary+200 from person;
        - 在所有學生分數上加10分特長分顯示
            指令範例： select name,JS+10 ,Django+10 ,OpenStack+10 from exam;
    - 統計每個學生的總分
        指令範例： select name, JS + Django + OpenStack from exam;
    - 別名
        指令範例： select name as "姓名", sex as '性別' from person;
    - 使用別名表示學生總分
        指令範例： select name as 姓名, JS + Django + OpenStack as 總成績 from exam;

    - 使用where子句，進行過濾查詢
        - 查詢英語成績大於90分的同學
        指令範例： select id, name, JS from Exam where JS > 90;
    - 比較運算符：
        and or not
        >  <  >=  <=  <>  !=
        between 80 and 100 值在80到100之間
        in(80 , 90 , 100) 值是80或90或100
        like 'yuan%'
        /*
        pattern可以是%或者_，
        如果是%則表示任意多字符： 唐%，此例如唐僧,唐國強
        如果是_則表示一個字符： 唐_，只有唐僧符合。兩個_則表示兩個字符：__
        */
        指令範例：
            select id, name, JS from Exam where JS <> 88;
            select id, name, JS from Exam where JS between 80 and 100;
            select id, name, JS from Exam where JS in(88 , 98);
            select * from Exam where name like 'a%';
            select * from Exam where name='jamie' and js=10;
    - 查詢null
        指令範例：
            SELECT * from person WHERE dept_id is null;
            select * from Exam where js is null;

    - Order by 指定排序的列，排序的列即可是表中的列名，也可以是select語句後指定的別名
        - 由小到大排
            指令範例： select name, js from exam where js between 80 and 100 order by js;
        - 由大到小排
            指令範例： select name, js from exam where js between 80 and 100 order by js desc;
        - 對總分進行排序
            指令範例： select name, js+django+OpenStack as 總成績 from exam order by 總成績 desc;
        - 使用ifnull判斷如果為null，就當作0
            指令範例：
                select name ,(ifnull(JS, 0) + ifnull(Django, 0) + ifnull(OpenStack, 0))
                    as 總成績 from exam where name like 'a%' order by 總成績 desc;

    - group by 分組查詢(注意，按分組條件分組後每一組只會顯示第一條記錄)
        - 不能選擇分組以外的列名
            指令範例：
                select name from exam group by name;  --成功
                select name, js from exam group by name;  --不成功
        - 聚合函數中列名不包含在內(注意先分組再聚合函數)
            指令範例： select name, sum(js), sum(django) from exam group by name;  --成功
        - having和where兩者都可以對查詢結果進行進一步的過濾，差別有：
            <1>where語句只能用在分組之前的篩選，having可以用在分組之後的篩選；
            <2>使用where語句的地方都可以用having進行替換
            <3>having中可以用聚合函數，where中就不行。
                指令範例： select name, sum(js), sum(django) from exam group by name having sum(js)>150;
        - group_concat()把分組後的所有值列出來
            指令範例： select name, group_concat(js) from exam group by name;

    - 聚合函數
        - COUNT(列名)：統計行的個數
            指令範例：
                select count(*) from exam;
                select count(name) from exam where js>80;
        - SUM(列名)：統計滿足條件的行的內容和
            指令範例：
                select sum(JS) as JS總成績 from Exam;
                select sum(ifnull(JS, 0) + ifnull(Django, 0)) as 總成績 from Exam;
        - AVG(列名)：平均值(不計算null)
            指令範例： select avg(js) from exam;
        - Max、Min
            指令範例：
                select max(js) from exam;
                select max(Js+Django) from exam;
        - GROUP_CONCAT(列名) => 列出group裡的所有人
            指令範例： select GROUP_CONCAT(name), js from exam group by js;   =>  照js成績分組，並列出各成績中各有誰

    - limit限制
        - 限制前三條
            指令範例： SELECT * from Exam limit 3;
        - js>80並限制前三條
            指令範例： SELECT * from Exam where js>80 limit 3;
        - 跳過前兩條顯示接下來的四條紀錄(從0開始算，跳過第0,1條，從第2條開始)
            指令範例： SELECT * from Exam limit 2,4;

    - 使用正則表達式查詢
        指令範例：
            select * from exam where name regexp '^j';
            select * from exam where name regexp 'ie$';


------------------------※ 重點：執行順序------------------------
    Mysql在執行sql語句時的執行順序：FROM -> WHERE -> GROUP BY -> 聚合函數 -> HAVING -> SELECT -> ORDER BY -> LIMIT　
        分析:
            select JS as JS成績 from Exam where JS成績> 70;   --不成功(因為會先執行where，而此時JS成績還沒被設定)
            select JS as JS成績 from Exam having JS成績> 90;  --成功
            select JS as JS成績 from Exam order by JS成績;    --成功

    練習查询：姓名不同人员的最高工资,并且要求大于5000元,同时按最大工资进行排序并取出前5条
        select name, max(salary)
        from person
        where name is not null
        group by name
        having max(salary) > 5000
        order by max(salary)
        limit 0,5

        在上面的示例中 SQL 语句的执行顺序如下：
            (1). 首先执行 FROM 子句, 从 person 表 组装数据源的数据
            (2). 执行 WHERE 子句, 筛选 person 表中 name 不为 NULL 的数据
            (3). 执行 GROUP BY 子句, 把 person 表按 "name" 列进行分组
            (4). 计算 max() 聚集函数, 按 "工资" 求出工资中最大的一些数值
            (5). 执行 HAVING 子句, 筛选工资大于 5000的人员
            (6). 執行 SELECT 語句, 查找數據
            (7). 执行 ORDER BY 子句, 把最后的结果按 "Max 工资" 进行排序
            (8). 最后执行 LIMIT 子句, 进行分页查询