- XMLHttpRequest:
    - 最初早期用來與伺服器端請求資料的方式，已很少人在使用
    - 可以使用JSON、XML、HTML和text文字等格式傳送和接收資料
    - 優點：
        - 在不用重新載入頁面的情況下更新網頁
        - 可在頁面已載入後，從伺服器請求/接收資料
    - 缺點：
        - 使用起來也比較繁瑣，需要設定很多值
        - 會有瀏覽器相容之問題，需要寫相容程式碼
        - 如果有多個請求，並且有依賴關係的話，容易形成回撥地獄

- jQuery ajax:
    - 過去幾年較為流行的請求方式
    - 為了更快捷的操作DOM事件，並且規避一些瀏覽器相容問題，產生了jQuery
    - jQuery ajax是對XMLHttpRequest物件進一步的封裝
    - 優點：
        - 對原生XHR的封裝，做了相容處理，簡化了使用
        - 增加了對JSONP的支援，可以簡單處理部分跨域
            - JSONP: 是資料格式JSON的一種「使用模式」，可以讓網頁從別的網域要資料
    - 缺點：
        - 如果有多個請求，並且有依賴關係的話，容易形成回撥地獄(同樣未解決)
            - 當遇到連續使用多個ajax請求的情況，並且做ajax請求時，這個新的ajax請求的其中一個引數，得從上一個ajax請求中獲取時，就需要回調函式套回撥函數了
        - jquery ajax本身是針對MVC設計模式的編程，與當前流行的基於MVVM模式的vue、react等框架不符合
        - ajax是jQuery中的一個方法，但如果為了要使用ajax卻要引入整個jQuery會有點浪費

- axios:
    - 現今較為流行的請求方式
    - Axios是一個基於promise的HTTP庫，可以用在瀏覽器和 node.js 中
        - Promise 本身是用來改善 JavaScript 非同步的語法結構
    - 本質也是對原生XMLHttpRequest的封裝，只不過它是Promise的實現版本
    - 優點：
        - 支援ES6的語法 Promise API
        - 避免了回撥地獄
        - 語法簡潔
        - 可以直接將回應的 JSON 資料轉換成 JavaScript 的 Object
        - 客戶端支援防禦 CSRF
        - 提供併發請求的功能，能讓使用者更方便的操作
    - 缺點：
        - 只支持現代瀏覽器

- fetch:
    - 現今較為流行的請求方式
    - fetch是低層次的API，代替XHR，可以輕鬆處理各種格式，非文字化格式
    - 優點：
        - 支援ES6的語法 Promise API
        - 避免了回撥地獄
        - 語法簡潔
        - 是一種新的實現方法，說不定在未來會取代掉XHR
    - 缺點：
        - fetch只對網路請求報錯，對400，500都當做成功的請求，需要封裝去處理
            - 當接收到一個代表錯誤的 HTTP 狀態碼時，從 fetch()返回的 Promise 不會被標記為 reject，即使該 HTTP 響應的狀態碼是 404 或 500。
              相反，它會將 Promise 狀態標記為 resolve （但是會將resolve的返回值的 ok 屬性設定為 false ），僅當網路故障時或請求被阻止時，才會標記為reject
        - 預設不會帶cookie，需要新增配置項
        - 不支援超時控制
        - fetch沒有辦法原生監測請求的進度，而XHR可以
