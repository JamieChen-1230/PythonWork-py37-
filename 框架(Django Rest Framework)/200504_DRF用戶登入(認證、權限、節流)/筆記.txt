※ 認證(EX:用戶登入)：【先做認證，在做權限】
    一、使用：
        - 創建類：繼承BaseAuthentication，並實現authenticate方法。

        - 返回值(三種)：
            - None：自己不處理，交給下認證來處理
            - 拋出異常：
                from rest_framework import exceptions
                raise exceptions.AuthenticationFailed('用戶驗證失敗')
            - (元素1, 元素2)：
                元素1賦值給request.user；元素2賦值給request.auth

        - 局部使用(在view中加入靜態字段authentication_classes)：
            class OrderView(APIView):
                # 加入認證
                authentication_classes = [MyAuthentication, ]

        - 全局使用(加到settings.py)：
            REST_FRAMEWORK = {
                # 全局使用認證類(若想讓view不使用全局認證類，則在其中加入authentication_classes=[])
                "DEFAULT_AUTHENTICATION_CLASSES": ('api.views.MyAuthentication', )  # 通常不會寫到views中，而是會再另外創一個py檔(EX:auth.py)
            }

    二、源碼流程：
        -> dispatch
            -> 封裝request
                -> 獲取所有定義的認證類(全局/局部定義的)，在通過列表生成式(列表推導)創建了各個認證類之對象
            -> initial
                -> perform_authentication
                    -> request.user (在內部循環了認證類的所有對象)

    三、內置類：
        class BaseAuthentication(object):
            # 具體做認證操作的方法
            def authenticate(self, request):
                raise NotImplementedError(".authenticate() must be overridden.")
            # 當認證失敗時，給瀏覽器返回的響應頭
            def authenticate_header(self, request):
                pass


※ 權限(EX:用戶等級權限)：【先做認證，在做權限】
    一、使用：不同視圖不同權限可以訪問
        - 創建類：繼承BasePermission，並實現has_permission方法。

        - 返回值(兩種)：
            - True：有權限
            - False：無權限

        - 局部使用(在view中加入靜態字段permission_classes)：
            class OrderView(APIView):
                # 加入權限
                permission_classes = [OtherPermission, ]

        - 全局使用(加到settings.py)：
            REST_FRAMEWORK = {
                # 全局使用認證類(若想讓view不使用全局認證類，則在其中加入authentication_classes=[])
                "DEFAULT_PERMISSION_CLASSES": ('api.utils.permission.SVIPPermission',)
            }

    二、源碼流程：
        -> dispatch
            -> initial
                -> check_permissions
                    -> for permission in self.get_permissions(): (循環了權限類的所有對象)

    三、內置類：
        class BasePermission(object):
            # 具體做權限操作的方法
            def has_permission(self, request, view):
                return True
            def has_object_permission(self, request, view, obj):
                return True


※ 節流(EX:訪問頻率限制)：
    一、使用：
        - 創建類：
            - 繼承BaseThrottle，並實現allow_request方法。
            - (優)繼承SimpleRateThrottle，並實現scope屬性(setting.py中的key)和get_cache_key方法。

        - 返回值(兩種)：
            - True：可繼續訪問
            - False：訪問頻率太高，不可繼續訪問

        - 局部使用(在view中加入靜態字段throttle_classes)：
            class OrderView(APIView):
                # 加入權限
                throttle_classes = [VisitThrottle, ]

        - 全局使用(加到settings.py)：
            REST_FRAMEWORK = {
                'DEFAULT_THROTTLE_CLASSES': ('api.utils.throttle.VisitThrottle',),  # 通常不會寫到views中，而是會再另外創一個py檔(EX:throttle.py)
                # 使用內置的訪問節流器(SimpleRateThrottle)，需要設置訪問的頻率
                'DEFAULT_THROTTLE_RATES': {
                    'ip': '3/m',   # ip為自定義字段，3/m表示一分鐘三次
                    'username': '10/m',
                },  # 若繼承SimpleRateThrottle的話就必須設置
            }

    二、源碼流程：
        -> dispatch
            -> initial
                -> check_throttles
                    -> for throttle in self.get_throttles() (循環了節流器類的所有對象)
